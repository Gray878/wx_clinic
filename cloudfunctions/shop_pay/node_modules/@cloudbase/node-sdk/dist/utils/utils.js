"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TcbError = void 0;
exports.isAppId = isAppId;
exports.filterValue = filterValue;
exports.filterUndefined = filterUndefined;
exports.E = E;
exports.isNonEmptyString = isNonEmptyString;
exports.second = second;
exports.setThrowOnCode = setThrowOnCode;
exports.processReturn = processReturn;
exports.isPageModuleName = isPageModuleName;
exports.isValidEnvFormat = isValidEnvFormat;
class TcbError extends Error {
    constructor(error) {
        super(error.message);
        this.code = error.code;
        this.message = error.message;
        this.requestId = error.requestId || '';
    }
}
exports.TcbError = TcbError;
function isAppId(appIdStr) {
    return /^[1-9][0-9]{4,64}$/gim.test(appIdStr);
}
function filterValue(o, value) {
    for (const key in o) {
        if (o[key] === value) {
            /* eslint-disable-next-line @typescript-eslint/no-dynamic-delete */
            delete o[key];
        }
    }
}
function filterUndefined(o) {
    filterValue(o, undefined);
}
function E(errObj) {
    return new TcbError(errObj);
}
function isNonEmptyString(str) {
    return typeof str === 'string' && str !== '';
}
function second() {
    // istanbul ignore next
    return Math.floor(new Date().getTime() / 1000);
}
// 兼容模式开关，兼容模式下，不抛出异常，直接返回
let throwOnCode = true;
function setThrowOnCode(value) {
    throwOnCode = value;
}
function processReturn(result) {
    if (!throwOnCode) {
        // 不抛报错，直接返回
        return result;
    }
    throw E(Object.assign({}, result));
}
/**
 * 是否是场景模块名
 *
 * $: 前缀，表示SaaS场景模块名，非实际环境ID，当前通过特殊环境ID标识
 *
 * @param envId
 * @returns
 */
function isPageModuleName(envId = '') {
    return typeof envId === 'string' && envId.startsWith('$:');
}
// 20 + 1 + 16, 限制长度 40
const kEnvRuleReg = /^[a-z0-9_-]{1,40}$/;
function isValidEnvFormat(env = '') {
    return typeof env === 'string' && kEnvRuleReg.test(env);
}
